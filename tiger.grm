%{
#include <stdio.h>

extern int yylex(void); /* function prototype */

void yyerror(char *s)
{
 // EM_error(EM_tokPos, "%s", s);
  printf("ERROR: %s\n", s); 
}
%}


%union {
	int pos;
	int ival;
	char* sval;
  int token;
}

%token <sval> ID STRING
%token <ival> INT

%token <token> COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK LBRACE RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN ARRAY IF THEN ELSE WHILE FOR TO DO LET IN END OF BREAK NIL FUNCTION VAR TYPE 

%start program

%left PLUS MINUS
%left TIMES DIVIDES
%left UMINUS
%%

program: exp
/*
exp: INT {}
   | exp PLUS exp {}
   | exp MINUS exp {}
   ;
*/
exp: lvalue
   | INT
   | STRING
   | NIL
   | LPAREN exp RPAREN
   | exp PLUS exp
   | exp MINUS exp
   | exp TIMES exp
   | exp DIVIDE exp
   | exp AND exp
   | exp OR exp
   | exp EQ exp
   | exp NEQ exp
   | MINUS exp  %prec UMINUS
   | LPAREN exp exps RPAREN
   | funcall
   | IF exp THEN exp
   | IF exp THEN exp ELSE exp
   | WHILE exp DO exp
   | FOR ID ASSIGN exp TO exp DO exp
   | LET decs IN exp END
   | BREAK
;

lvalue : ID
       | lvalue DOT ID
       | lvalue LBRACK exp RBRACK
;

exps: 
    | SEMICOLON exp exps
;

funcall: ID LPAREN paramlist RPAREN
;

paramlist: 
   | ID paramlist2
;

paramlist2:
   | COMMA ID paramlist2
;

decs: dec decs
    | dec
;

dec: tydec
   | vardec
   | fundec
;

tydec : TYPE ID EQ ty
;

ty: ID
  | LBRACE tyfields RBRACE
  | ARRAY OF ID
;

tyfields : ID COLON ID 
         | tyfields SEMICOLON ID COLON ID
;

vardec : VAR ID ASSIGN exp
       | VAR ID COLON ID ASSIGN exp
;

fundec : FUNCTION ID LPAREN tyfields RPAREN EQ exp
       | FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp
;

%%

